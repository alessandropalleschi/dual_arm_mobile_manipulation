<launch>
    
    <!-- Model of the robot -->
    <arg name="robot_model" value="$(find iliad)/urdf/iliad.urdf.xacro"/>
    
    <arg name="panda_base_x"     default="0.25"/>
    <arg name="panda_base_y"     default="-0.22"/>
    <arg name="panda_base_z"     default="0.15"/>
    <arg name="panda_base_roll"  default="0.00"/>
    <arg name="panda_base_pitch" default="0.785"/>  <!-- pi/4=0.785 -->
    <arg name="panda_base_yaw"   default="0.00"/>
    <arg name="ur10e_base_x"     default="0.35"/>
    <arg name="ur10e_base_y"     default="0.32"/>
    <arg name="ur10e_base_z"     default="0.05"/>
    <arg name="ur10e_base_roll"  default="0.00"/>
    <arg name="ur10e_base_pitch" default="0.00"/>
    <arg name="ur10e_base_yaw"   default="0.00"/>
    
    <!-- RViz Configuration -->
    <arg name="rvizconfig" value="$(find iliad)/rviz/iliad_rviz.rviz" />
    <arg name="launch_rviz" default="false"/>
    
    <!-- Gazebo Arguments-->
    <arg name="gazebo_paused" default="true"/>
    <arg name="gazebo_use_sim_time" default="true"/>
    <arg name="gazebo_gui" default="true"/>
    <arg name="gazebo_headless" default="false"/>
    <arg name="gazebo_debug" default="false"/>

    <!-- Open Gaezbo World -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find iliad)/world/pallet_world_1.world"/> <!-- -->
        <arg name="paused" value="$(arg gazebo_paused)"/>
        <arg name="use_sim_time" value="$(arg gazebo_use_sim_time)"/>
        <arg name="gui" value="$(arg gazebo_gui)" />
        <arg name="headless" value="$(arg gazebo_headless)"/>
        <arg name="debug" value="$(arg gazebo_debug)" />        
    </include>
    
    <!-- Load the robot description of the complete robot -->
    <arg name="summit_prefix" value="summitxls_"/>    <!-- if change this args, change also controller definition in /config/*.yaml files--> 
    <arg name="ur10e_prefix"  value="ur10e_"/>
    <arg name="panda_prefix"  value="panda"/>
        
    <!-- Set true for use RosPlanarMovePlugin (raccomended).
    If false, differentialDrive will be used for OmniDrive controller -->
    <arg name="ros_planar_move_plugin" default="true"/>   <!-- if change this args to false, change also friction parameters in urdf/omni_wheel.urdf.xacro--> 
    
    <arg name="initial_joint_positions"
       doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
       default="-J $(arg panda_prefix)_joint1 0
                -J $(arg panda_prefix)_joint2 -0.785398163
                -J $(arg panda_prefix)_joint3 0
                -J $(arg panda_prefix)_joint4 -2.35619449
                -J $(arg panda_prefix)_joint5 0
                -J $(arg panda_prefix)_joint6 1.57079632679
                -J $(arg panda_prefix)_joint7 0.785398163397"
       />  
    <!-- Load robot model in ROS parameter server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(arg robot_model)'
        panda_base_x:=$(arg panda_base_x)
        panda_base_y:=$(arg panda_base_y)  
        panda_base_z:=$(arg panda_base_z)
        panda_base_roll:=$(arg panda_base_roll)
        panda_base_pitch:=$(arg panda_base_pitch)
        panda_base_yaw:=$(arg panda_base_yaw)
        ur10e_base_x:=$(arg ur10e_base_x)
        ur10e_base_y:=$(arg ur10e_base_y)
        ur10e_base_z:=$(arg ur10e_base_z)
        ur10e_base_roll:=$(arg ur10e_base_roll)
        ur10e_base_pitch:=$(arg ur10e_base_pitch)
        ur10e_base_yaw:=$(arg ur10e_base_yaw)
     
        summit_prefix:=$(arg summit_prefix)
        ur10e_prefix:=$(arg ur10e_prefix)
        panda_prefix:=$(arg panda_prefix)

        ros_planar_move_plugin:=$(arg ros_planar_move_plugin)"
        />
    
    <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args=" -urdf -model iliad $(arg initial_joint_positions) -param robot_description" respawn="false" output="screen" />
        
        
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="500.0" />
    </node>

    <rosparam command="load"
            file="$(find iliad)/config/joints.yaml"
            ns="iliad_joint_state_controller" />      
    
    <node name="iliad_joint_state_spawner" pkg="controller_manager" type="spawner"
        args="iliad_joint_state_controller"/>
    
    
    <!--USE ROS PLANAR PLUGIN -->
    <group if="$(arg ros_planar_move_plugin)">
        <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
            <param name="default_topic" value="/robotnik_base_control/cmd_vel"/>
        </node>
    </group>
    
    <group unless="$(arg ros_planar_move_plugin)">
       <rosparam command="load"
                file="$(find iliad)/config/diffdrive.yaml"
                ns="summit_diff_drive_controller" />
        <node name="iliad_controller_spawner" pkg="controller_manager" type="spawner"
        args="summit_diff_drive_controller"/>
        <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
            <param name="default_topic" value="/summit_diff_drive_controller/cmd_vel"/>
        </node>
    </group>   
    
    <rosparam command="load"
            file="$(find iliad)/config/ur10e_controllers.yaml"/>
    
    <node name="ur10e_controller_spawner" pkg="controller_manager" type="spawner"
    args="ur10e_eff_joint_traj_controller"
    output="screen" respawn="false" />
    
    <rosparam command="load"
            file="$(find iliad)/config/panda_controllers.yaml"/>
       
    <node name="panda_controller_spawner" pkg="controller_manager" type="spawner"
        args="panda_eff_joint_traj_controller" 
        output="screen" respawn="false" /> 

    <node if="$(arg launch_rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" /> 
        

</launch>
